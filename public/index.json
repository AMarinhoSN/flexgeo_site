[
{
	"uri": "/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": " STEP 0 First things first First of all, did you read the FleXgeo paper? If not, I highly recommend you to check the awesome 1 paper bellow before proceed.\n â€œA superposition free method for protein conformational ensemble analyses and local clustering based on a differential geometry representation of backbone\u0026rdquo;, PROTEINS: Structure, Function, and Bioinformatics, 2018\n This is a basic tutorial designed to be a quick tour on how to use FleXgeo, to achieve that we will reproduce Ubiquitin analyses presented on the FleXgeo paper.\nWhat FleXgeo can do:\n Compute a protein backbone differential geometry descriptors, via a smooth curve representation of backbones cluster protein conformations, via global clustering solution per residue based on its curvature and torsion distribution quantify protein residues flexibility, via the computation of $d_{max}$ compare protein conformations to a reference structure, via the computation of euclidean distances on the curvature and torsion space  Ok, now that you carefully read the paper, we can begin our differential geometry witchcraft.\n1: this judgement comes from a completely unbiased place and with no conflict of interest at all.\n "
},
{
	"uri": "/basics/intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " On this basic tutorial, we will reproduce the analyses of the Ubiquitin ensemble presented at FleXgeo paper. The Ubiquitin (Ubq) is a good example of a regular rigid globular protein with a flexible C-terminal tail. This is a fairly simple and common analyses scenario on protein structural biology projects, therefore a good place to start. As on any data analyses scenario, before we start to do anything at all let\u0026rsquo;s first understand our general questions, goals and the \u0026ldquo;what/why/how\u0026rdquo; differential geometry can be useful.\nWhat we want to know? Flexibility is an important aspect of protein function and let\u0026rsquo;s assume that for some reason you are interest on Ubq C-terminal tail dynamics. Maybe you found experimental evidence that mutations on this region affects Ubq binding capabilities and want to know how flexible it actually is and which residues are more important.\nWhat data do we have? Fortunately, there is an Ubq conformational ensemble obtained based on NMR-restrained metadynamics available at Protein Data Bank (2LJ5). This ensemble is a set of 300 conformations which together best explain a set of Residual Dipolar Coupling data obtained from experiments. Imagined that you can get the same data from these hypothetical Ubq mutants, this 2LJ5 ensemble can provide a baseline to compare how the tail behave.\nAlthough not necessary to follow this tutorial, you should check the paper describing how this ensemble was obtained.\n The common approach The common approach for this particular problem could be align the conformations and compute the RMSF (Root Mean Square Fluctuation). This will give you some number and you would be able to say something like \u0026ldquo;the C-terminal tail presents X angstroms of RMSF therefore \u0026hellip;\u0026rdquo;, if X is higher than, let\u0026rsquo;s say, 3 angstroms you would conclude that is flexible and use this number as a base line and compare with new data. Note that this hypothetical analyses scenario relies heavily on the decision made on how to superimpose the structure. For instance, if only the first three residues of the tail were used for the alignment and one just rely on the values of RMSF to judge flexibility, RMSF would suggest that the whole protein is very flexible with the exception of those 3 residues. Of course, this is an absurd example and only someone that does not understand what the RMSF quantity means would came to such conclusions, but you would be surprise on how often similar misinterpretation can happen on less obvious cases.\nImagined that you try different superposition solution for this Ubq C-terminal tail, but you are not confident that those RMSFs values are meaningful. Then you realize you will have to compare it with new data for the mutations and small differences in the superposition solution could be a problem during the interpretation. This problem is true for atomic coordinates, but there is also the possibility of use $\\phi-\\psi$ angles or define some set of collective variables. Each of those options have some limitations, some of them were discussed in the FleXgeo paper, but for this tutorial let\u0026rsquo;s assume you try those and for some reason did not trust the results. Maybe you are not sure if your collective variables are capturing the fundamental dynamics aspect, the periodicity of $\\phi-\\psi$ are making things more complicated in the data analyses or you simply would like to look at your data from a different perspective analyses. Like any normal regular human being, you find yourself thinking during the day:\n \u0026ldquo;The world would be much better if we have an intuitive mathematical representation of the protein conformational space\u0026rdquo;.\n Some friend told you about hearing some crazy rumour about some ancient protein differential geometry witchcraft that avoid the structural superposition problem. You google a bit, you check some awesome papers describing it and find out that this mathematical representation may help you solve your problem. Then you find that there is this FleXgeo software you can use to compute it and is convinced that you should at least give it a try.\nWhat is the logic behind this DG representation? The rationale behind DG-representation implemented on FleXgeo is quite simple:\n One can represent protein backbones as regular 3D spatial curves Regular 3D patial curves can be uniquely characterized by curvature, $\\kappa$, and torsion, $\\tau$ as a function of arc-length, $s$ $\\kappa$ and $\\tau$ can be used to compare regular 3D spatial curves.  Considering 1), 2) and 3), therefore\n Protein backbones can be compared solely based on $\\kappa$ and $\\tau$ values.\n How this DG witchcraft avoids the superposition problem? In a nutshell, the DG-based representation of protein backbone have the advantage of avoiding the superposition problem because the descriptors are absolute in space. This specific property rely on the Fundamental Theorem of Space Curves, which state that every regular spatial 3D-curve can be uniquely characterized by its curvature, $\\kappa$, and $\\tau$ as a function of arc length, $s$. The mathematical proof of this theorem is not trivial, however its meaning is intuitive. Imagine that one have two equal semi-rigid straight wires. Only two kind of distortions are possible to be imposed on such wires, 1) to curve it and/or 2) to torsion it in a given set of points. If wire $A$ get a specific sequence of distortions operations and this exact same operations is also applied to wire $B$, both wires will end up with the exact same final shape. Therefore, one could compare such wires just by analysing the specific set of distortion applied to each one, without the need to superimpose such wires.\nAnother way to look into this representation is to think how geometry tends to represent shapes using the minimum amount of descriptors as possible. For instance, circles can be describe solely by its radius, if two circles have different radius you know which one is bigger than the other without the need to superimposition. Similarly, 3D spatial curves can be uniquely specified by $\\kappa$ and $\\tau$ as a function of $s$. Don\u0026rsquo;t worry if all of this sounds too abstract for you, along this tutorial we will present in a (hopefully) intuitive and easy to understand way what all of this actually means and how to interpret its meaning on the structural biology analyses context.\nNow that you have a at least general notion of what this representation is all about, we can define our goals.\nA more detailed description of the math behind the method is available at FleXgeo paper, but a section devoted for the math-hardcore structural biologist (that we know you are) will be added to the website in the future.\n Main goal Characterize and explore backbone dynamics of the C-terminal tail of Ubiquitin using differential geometry.\nSpecific goals  Compute differential geometry representation Plot the raw data Compute $d_{max}$ to quantify protein flexibility Check if there is an interesting clustering solution (SPOILER ALERT: there is not, but is nice to know how to do it)  "
},
{
	"uri": "/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Installation 1. Download FleXgeo\nThe easiest way is simply run:\n$ git clone https://github.com/AMarinhoSN/FleXgeo.git  If you are not familiar with git clone, you can just download from FleXgeo github repository\n2. Install requirements\nTo run the analyses scripts you need Python 3 and you can install the required python libraries using pip3. You can install the python libraries directly on your default python environment using:\n$ pip3 install cython $ pip3 install -r /path/to/FleXgeo/requirements.txt  Another option is to create a specific FleXgeo python environment using virtualenv by:\n$ pip3 install virtualenv $ cd virtual_envs_location $ virtualenv flexgeo_env $ source flexgeo_env/bin/activate $ cd FLEXGEO_LOCATION $ pip3 install cython $ pip3 install -r requirements.txt  You also gonna need Lua interpreter to compute $d_{max}$. On Linux, you can install it by:\n$ sudo apt-get install luajit  If you want to access run FleXgeo easily on Linux terminal, just add alias flexgeo='/full/path/to/FleXgeo/bin/FleXgeo_[MY_OS]', at my \u0026ldquo;MY_OS\u0026rdquo; you can choose between \u0026lsquo;LINUX\u0026rsquo;, \u0026lsquo;MacOS_10.13.4\u0026rsquo; and \u0026lsquo;WIN_10_64\u0026rsquo;\nHere we assume you are a sane person and is working on a Linux environment. Everything should work similarly on MacOS and Windows, if you find any OS specific error (or of any other kind) feel free to check and create an issue at FleXgeo repository.\n "
},
{
	"uri": "/basics/setup/",
	"title": "Setup everything",
	"tags": [],
	"description": "",
	"content": " SETUP EVERYTHING Follow the FleXgeo installation instructions\n"
},
{
	"uri": "/basics/computedg/",
	"title": "Compute differential geometry",
	"tags": [],
	"description": "",
	"content": " First of all, create a directory and download Ubq ensemble from the pdb by:\nmkdir ubq cd ubq wget https://files.rcsb.org/download/2LJ5.pdb  Every analyses using DG can be separated in two phases:\n Differential geometry descriptors computation Descriptor analyses  To get 1. done, just run:\nflexgeo -pdb=./2LJ5.pdb  If you did not add the FleXgeo alias on the \u0026lsquo;.bashrc\u0026rsquo;, just use the fullpath. Check the installation guide for more information.\n This will generate a bunch of output files and it should finish in a few seconds the computation.\nWhat are the output files? The output files are:\n Diffgeo_xgeo.csv : contains the calculated differential geometry descriptors of the input ensemble. Diffgeo_NORM.csv : Same values of \u0026ldquo;Diffgeo_xgeo.csv\u0026rdquo; but normalized to $[0,1]$. Diffgeo_MEAN.csv: Mean values of FleXgeo descriptors per residue Diffgeo_STD.csv: Standard deviation of FleXgeo descriptors per residue Diffgeo_VAR.csv: Variation of FleXgeo descriptors per residue DiffgeoStat.lua : The histogram bins position and value of each descriptor for each residue.  The most important file is the Diffgeo_xgeo.csv, among other general information extract from the PDB it contain the curvature ($\\kappa$), torsion( $\\tau$ ), arc-lenght( $s$ ) and writhing number($w$) per residue. The other .csv are self explanatory and the DiffgeoStat.lua is gonna be used on the $d_{max}$ computation.\nFor this tutorial, we will focus only on the $\\kappa$ and $\\tau$, more details about $s$ and $w$ will be added in the future.\nWhat did FleXgeo have done? In a (pseudo-code) nutshell,\nfor conformation in ensemble: \u0026gt; get carbon alpha coordinates xyz \u0026gt; generate curve backbone representation via cubic splice interpolation for residue_x in conformation: \u0026gt; compute curvature and torsion of the points of the curve corresponding to residue_x \u0026gt; store results \u0026gt; compute histogram \u0026gt; write output files  [add a diagram - with nice pymol pics - explaining how its done =D]\nNow we have our data, so let\u0026rsquo;s plot and discuss its meaning.\n"
},
{
	"uri": "/quickguide/",
	"title": "Quick guide",
	"tags": [],
	"description": "",
	"content": "If you are just looking for some list of commands to run, don\u0026rsquo;t be ashamed, nobody will judge you. I know you just want the \u0026ldquo;how to\u0026rdquo;, but If you have no idea of \u0026ldquo;what is\u0026rdquo; and \u0026ldquo;why to\u0026rdquo; use FleXgeo, you should check FleXgeo paper and the Basic tutorial.\n Calculate Differential Geometry  $ /path/to/FleXgeo/bin/FleXgeo_[MY_OS] -pdb=ensemble.pdb [options]  FleXgeo accepts the following arguments:\n   OPTIONS DESCRIPTION DEFAULT     -pdb=[filename.pdb] Set input .pdb filename User must provide   -ncpus=[int] Set the number of cpus FleXgeo will use All cpus available   -isSingle Indicate if input pdb is a single conformation pdb FALSE   -outprfx=[prefix] Set the output files prefix to be used \u0026lsquo;Diffgeo_\u0026rsquo;     Plot xgeo data\n$ python3 /path/to/PlotFXgeoData.py DiffGeo_xgeo.csv  Calculate distance between all conformations and a reference conformation on the ensemble.\n$ python3.5 /path/to/FleXgeo/CalcEnsDistFromRef.py -in=XgeoObj.p  Calculate distance between all conformations and an external reference conformation\n$ python3.5 /path/to/FleXgeo/CalcEnsDistFromRef.py -in=XgeoObj.p -ext_ref=/path/to/ref_xgeo.csv  Calculate residues $d_{max}$\n$ luajit /path/to/FleXgeo/HistProc.lua $ python3.5 /path/to/FleXgeo/ComputeResDMax.py  Clustering conformations\n$ python3.5 /path/to/FleXgeo/GetResClusters.py -res ALL DiffGeo_xgeo.csv -min_pcluster .05  Write cluster pdbs\n$ python3.5 /path/to/FleXgeo/WriteClustersPDB.py cluster.clstr source.pdb res   "
},
{
	"uri": "/basics/plotdata/",
	"title": "Plot and understand the data",
	"tags": [],
	"description": "",
	"content": " Now we have the data computed, so the first thing to do is check how it looks like. You can plot the data from \u0026lsquo;Diffgeo_xgeo.csv\u0026rsquo; using any software or script you like, but on FleXgeo you find a script to generate some plots and you can run it using:\n$ python3 /path/to/FleXgeo/PlotFXgeoData.py DiffGeo_xgeo.csv  This script will generate the plot bellow\nSo what does that mean? The plot might be not very informative at first glance, but to interpret it first we need to understand the meaning of curvature, $\\kappa$, and torsion, $\\tau$, values. The wikipedia article on differential geometry of spatial curves is a very decent introduction which also include the mathematics behind it and you should check it, but for this tutorial let\u0026rsquo;s try to keep it brief and simple. To understand what $\\kappa$ and $\\tau$ actually means, first we need to understand how such quantities are defined and they are defined based on the framing of a curve.\nframing of a curve The framing of a curve means we need to define a set of vectors that can be computed for each point along the regular spatial curve, $r$, and by monitoring how such set of vectors changes along such curve characterize its shape. The \u0026lsquo;along the curve\u0026rsquo; part can be more objectively specified by the arc-length, $s$, as $r$ is just a function that map some values on the interval $I$, we can parametrize $\\vec{r}$ as a function of $s$ or, as mathematicians like to call it, $$ r : I \\rightarrow R^{3} $$ $$\\vec{r}(s) : I \\rightarrow R^{3}$$.\nThe standard choice for framing a curve is to use the frenet-serret frame, which defines 3 unit vectors: tangent ($\\vec{T}$), normal($\\vec{N}$) and binormal($\\vec{B}$) unit vectors). If the analysed curve, $\\vec{r}(s)$ represents a particle trajectory, the tangent vector will always point in the direction of the motion of the particle and the binormal vector would always point in the \u0026ldquo;up\u0026rdquo; direction from the particle frame of reference, check the animation.\nNow imagine that this particle just move in a straight line trajectory without any rotational motion. For such case the, $\\vec{T}$ and $\\vec{B}$ will be constant. On the other hand, if the particle moves on a non straight line trajectory but keep in the exact same plane, $\\vec{T}$ will change while $d\\vec{B}$ will still be constant. Considering these features, is possible tu use $\\vec{T}$ and $\\vec{B}$ to define quantities that measures how much a given point in a curve deviates from a straight line and from a plane.\ndefining $\\kappa$ and $\\tau$ Let\u0026rsquo;s first start with curvature, $\\kappa$. We can define $\\kappa$ as a measurement of how much a point in a given curve deviates from straight line by considering as a measurement of how much $\\vec{T}$ changes along the curve by: $$ \\kappa = | \\vec{\\kappa}(s) | = | \\frac{d\\vec{T}}{ds} | $$\nif $\\kappa = 0$ for a given point $t$, then the curve will be a perfect straight line at $t$. As higher the $\\kappa$ values, the higher will be the change of $\\vec{T}$ at the vicinity of $t$. Therefore, if a $\\kappa$ spike at point $t$ appears in your curve, this means that at point $t$ there is a abrupt change in the direction of the curve. Similarly, the same rationale can be applied to planes by defining the Torsion, $\\tau$, as $$ \\tau = | \\vec{\\tau} | = | \\frac{d\\vec{B}}{ds} | $$\nIf a $\\tau$ spike at point $t$ appears in your curve, this means that at point $t$ there is an abrupt change in the plane in the vicinity of $t$. With those to descriptors one can uniquely characterize any 3D regular curve via $\\kappa$ and $\\tau$ as a function of $s$. For instance, check how the $\\kappa$ and $\\tau$ values of a Torus knots relate to its Frenet-Serret frame in the animation bellow.\nWith that in mind you should be able to look to the plot generated and have an idea of what it means.\nWhat about the plot? The plot generate express the $\\kappa$ and $\\tau$ values per residue $t$ for all conformations of the ensemble. Each line of the plot is the representation of a single conformation and how much a residue change its \u0026ldquo;signature\u0026rdquo; give you an idea of its flexibility and what is happening. For instance, just by looking at the plot you can claim that residues 24 to 34 are a stable helix, that the last residues are more flexible and the region around residue 10 present a higher flexibility than the rest of the protein and residues 36 and 60 are stable points of inflection in the backbone. Look at the ensemble on Pymol and check if our interpretation make sense ;).\n"
},
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " FleXgeo FleXgeo is a software package design to compute and analyse protein conformational ensembles using a differential geometry (DG) representation of protein backbone. The current available version is the prototype software written to compute all analyses presented at:\n â€œA superposition free method for protein conformational ensemble analyses and local clustering based on a differential geometry representation of backbone\u0026rdquo;, PROTEINS: Structure, Function, and Bioinformatics, 2018\n While fully functional, keep in mind that this prototype was written to fulfil the authors own selfish desires. We try our best to make it usable to others outside our group, but for sure there are a lot to improve. If you have any suggestions, feel free to contact Antonio Marinho at a.marinho@cent.uw.edu.pl.\nHere you can find:\n Installation instructions A basic usage tutorial Quick command list  Main Features Currently, FleXgeo is able to:\n Compute backbone DG, compute differential geometry descriptors of protein conformations backbones. cluster protein conformations, via global clustering solution per residue based on its curvature and torsion distribution. quantify protein residues flexibility, via the computation of $d_{max}$ compare protein conformations to a reference structure, via the computation of euclidean distances on the curvature and torsion space.  FleXgeo code was written by PhD. Antonio Marinho da Silva Neto and PhD. Rinaldo Wander Montalvao.\nFleXgeo is under development and more features beyond the presented in the paper are planned to be added. If you want to be informed right away when a new feature is added you can star FleXgeo repository on github or simply check this page from time to time.\n Tutorials If you want a step by step guide, check the Basic Tutorial. If you know what you are doing and just want some quick command list to run, check the Quick and dirty guide.\nBugs/Suggestions/Comments Do you follow the instructions here and find unexpected errors, bugs, or have suggestion on how to make FleXgeo great again or, even better, simply want to express how grateful you are for this awesome software, please feel free to contact Antonio Marinho at a.marinho@cent.uw.edu.pl or use the FleXgeo github page and create a new issue.\nHow to cite? If you published results produced by FleXgeo, please cite:\n Marinho da Silva Neto, Antonio, et al. â€˜A Superposition Free Method for Protein Conformational Ensemble Analyses and Local Clustering Based on a Differential Geometry Representation of Backboneâ€™. Proteins: Structure, Function, and Bioinformatics, Dec. 2018. Crossref, doi:10.1002/prot.25652.\n A bibtex entry:\n@article{amarinho2018, title = {A superposition free method for protein conformational ensemble analyses and local clustering based on a differential geometry representation of backbone}, issn = {08873585}, url = {http://doi.wiley.com/10.1002/prot.25652}, doi = {10.1002/prot.25652}, language = {en}, urldate = {2019-01-02TZ}, journal = {Proteins: Structure, Function, and Bioinformatics}, author = {Marinho da Silva Neto, Antonio and Silva, Samuel Reghim and Vendruscolo, Michele and Camilloni, Carlo and Montalvao, Rinaldo Wander}, month = dec, year = {2018} }  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " FleXgeo authors The FleXgeo was written by PhD. Antonio Marinho da Silva Neto and PhD Rinaldo Wander MontalvÃ£o\nOpen Source FleXgeo development and usage would not be viable without the following free open source tools:\n numpy hdbscan matplotlib seaborn  FleXgeo Documentation webpage This page is maintained by PhD Antonio Marinho and is built based on\n Hugo Theme Learn Hugo  "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]